@startuml

skinparam BackgroundColor transparent
skinparam DefaultFontName Monospaced
skinparam RoundCorner     5
skinparam shadowing       false

skinparam class {
  ArrowColor              #5498C4
  ArrowThickness          3
  BackgroundColor         #F3F4F9
  BorderColor             #2C82AB
  BorderThickness         2
  FontName                Ariel
}

title District Designer Database Diagram


' ------------------------
' District Designer Module
' ------------------------


class SmartContracts << (T, #c0b7b1) Table >> {
  :smart-contract/address            - address
  :smart-contract/abi                - ipfs, not null
  :smart-contract/name               - varchar, indexed not null
  :smart-contract/owner              - address
  :smart-contract/proxy-target       - address
  :smart-contract/proxy-type         - ProxyType
  :smart-contract/proxy?             - boolean
  :smart-contract/version            - unsigned integer, indexed not null
  :smart-contract/created-on         - unsigned integer, not null

  primary key(:smart-contract/address)
  foreign key(:smart-contract/abi, Files(:file/hash))
}

enum ProxyType {
  DISTRICT_ADMIN_PROXY
  OWNER_PROXY
}

class SmartContractEvents << (T, #c0b7b1) Table >> {
  :smart-contract/address                    - address
  :smart-contract-event/event-key            - varchar
  :smart-contract-event/last-block-number    - unsigned integer, not null
  :smart-contract-event/last-log-index       - unsigned integer, not null

  primary key(:smart-contract/address, :smart-contract-event/event-key)
}
SmartContractEvents -- SmartContracts : fk(:smart-contract/address)


class IpfsEvents << (T, #c0b7b1) Table >> {
  :ipfs-events/id                             - unsigned integer
  :ipfs-events/last-hash                      - ipfs, not null

  primary key(:ipfs-events/id)
}


class Districts << (T, #c0b7b1) Table >> {
  :district/address                           - address
  :district/name                              - varchar, not null
  :district/title                             - varchar
  :district/subdomain                         - varchar, unique not null
  :district/description                       - varchar
  :district/logo                              - ipfs
  :district/cover-image                       - ipfs
  :district/favicon                           - ipfs
  :district/ga-tracking-id                    - varchar
  :district/treasury                          - address, not null
  :district/updated-on                        - unsigned integer
  :district/created-on                        - unsigned integer, indexed not null

  primary key(:district/address)
  foreign key(:district/css-file, Files(:file/hash))
  foreign key(:district/less-file, Files(:file/hash))
  foreign key(:district/logo, Files(:file/hash))
  foreign key(:district/cover-image, Files(:file/hash))
  foreign key(:district/favicon, Files(:file/hash))
}
Districts -- SmartContracts : fk(:district/address)


class Permissions << (T, #c0b7b1) Table >> {
  :permission/code                     - varchar
  :permission/name                     - varchar, not null
  :permission/description              - varchar, not null

  primary key(:permission/code)
}


class UserRoles << (T, #c0b7b1) Table >> {
  :user-role/uuid                    - uuid
  :user-role/name                    - varchar, not null

  primary key(:user-role/uuid)
}


class MultiUserRoles << (T, #c0b7b1) Table >> {
  :multi-user-role/uuid                    - uuid
  :user-role/uuid                          - uuid

  primary key(:multi-user-role/uuid, :user-role/uuid)
  foreign key(:user-role/uuid, UserRoles(:user-role/uuid))
}
MultiUserRoles -- UserRoles : fk(:user-role/uuid)


class UserRoleAddresses << (T, #c0b7b1) Table >> {
  :user-role/uuid                    - uuid
  :user-role/address                 - address, not null
  :user-role/admin-user-role?        - boolean, indexed

  primary key(:user-role/uuid, :user-role/address)
}
UserRoleAddresses -- UserRoles : fk(:user-role/uuid)


class DistrictPermissionUserRoles << (T, #c0b7b1) Table >> {
  :district/address                 - address
  :permission/code                  - varchar
  :user-role/uuid                   - uuid

  primary key(:district/address, :permission/code, :user-role/uuid)
}
DistrictPermissionUserRoles -- Districts : fk(:district/address)
DistrictPermissionUserRoles -- Permissions : fk(:permission/code)
DistrictPermissionUserRoles -- UserRoles : fk(:user-role/uuid)


class Files << (T, #c0b7b1) Table >> {
  :file/hash                        - ipfs
  :file/name                        - varchar
  :file/decryptable-by              - address
  :file/encrypted?                  - boolean

  primary key(:file/hash)
}


class MultiFiles << (T, #c0b7b1) Table >> {
  :multi-file/uuid                  - uuid
  :file/hash                        - ipfs

  primary key(:multi-file/uuid, :file/hash)
  foreign key(:file/hash, Files(:file/hash))
}
MultiFiles -- Files : fk(:file/hash)



class Fields << (T, #c0b7b1) Table >> {
  :field/uuid                        - uuid
  :field/name                        - varchar, not null
  :field/namespace                   - varchar
  :field/settings                    - varchar
  :field/type                        - varchar, not null

  primary key(:field/uuid)
}


class MultiFields << (T, #c0b7b1) Table >> {
  :multi-field/uuid                  - uuid
  :field/uuid                        - uuid

  primary key(:multi-field/uuid, :field/uuid)
  foreign key(:field/uuid, FieldValues(:field/uuid))
}
MultiFields -- Fields : fk(:field/uuid)


class FieldValues << (T, #c0b7b1) Table >> {
  :field-value/uuid                  - uuid
  :field/uuid                        - uuid
  :field-value/type                  - varchar, indexed not null
  :field-value/string                - varchar, indexed
  :field-value/int                   - integer, indexed
  :field-value/bigint                - unsigned big integer, indexed
  :field-value/float                 - float, indexed
  :field-value/boolean               - boolean, indexed
  :field-value/date                  - unsigned integer, indexed
  :field-value/file                  - ipfs
  :field-value/tags                  - uuid

  primary key(:field-value/uuid)
  foreign key(:field/uuid, Fields(:field/uuid))
  foreign key(:field-value/file, Files(:file/hash))
  foreign key(:field-value/tags, MultiTags(:field-value/tags))
}
FieldValues -- Fields : fk(:field/uuid)
FieldValues -- Files : fk(:file/hash)


class MultiFieldValues << (T, #c0b7b1) Table >> {
  :multi-field-value/uuid            - uuid
  :field-value/uuid                  - uuid

  primary key(:multi-field-value/uuid, :field-value/uuid)
  foreign key(:field-value/uuid, FieldValues(:field-value/uuid))
}
MultiFieldValues -- FieldValues : fk(:field-value/uuid)


class Modules << (T, #c0b7b1) Table >> {
  :module/code                            - varchar
  :module/name                            - varchar, not null
  :module/description                     - varchar, not null
  :module/owner                           - varchar, not null
  :module/logo                            - ipfs, not null
  :module/preview-images                  - uuid, not null
  :module/active-count                    - unsigned integer, default 0
  :module/created-on                      - unsigned integer, not null

  primary key(:module/code)
  foreign key(:module/preview-images, MultiFiles(:multi-file/uuid))
}
Modules -- MultiFiles : fk(:module/preview-images)


class DistrictModules << (T, #c0b7b1) Table >> {
  :module/code                           - varchar
  :district/address                      - address
  :district-module/activated-on          - unsigned integer, not null

  primary key(:module/code, :district/address)
}
DistrictModules -- Modules : fk(:module/code)
DistrictModules -- Districts : fk(:smart-contract/address)


class Themes << (T, #c0b7b1) Table >> {
  :theme/code                            - varchar
  :theme/name                            - varchar, not null
  :theme/description                     - varchar, not null
  :theme/default-settings                - varchar
  :theme/owner                           - address, not null
  :theme/preview-images                  - uuid, not null
  :theme/active-count                    - unsigned integer, default 0
  :theme/created-on                      - unsigned integer, not null

  primary key(:theme/code)
  foreign key(:theme/preview-images, MultiFiles(:multi-file/uuid))
}
Themes -- MultiFiles : fk(:module/preview-images)


class DistrictThemes << (T, #c0b7b1) Table >> {
  :theme/code                            - varchar
  :district/address                      - address
  :district-theme/settings               - varchar
  :district-theme/css                    - ipfs
  :district-theme/less                   - ipfs
  :district-theme/active?                - boolean, indexed
  :district-theme/activated-on           - unsigned integer

  primary key(:theme/code, :district/address)
  foreign key(:district-theme/css, Files(:file/hash))
  foreign key(:district-theme/less, Files(:file/hash))
}
DistrictThemes -- Themes : fk(:theme/code)
DistrictThemes -- Districts : fk(:district/address)


class Wizards << (T, #c0b7b1) Table >> {
  :wizard/code                            - varchar
  :wizard/name                            - varchar, not null
  :wizard/description                     - varchar, not null
  :wizard/owner                           - address, not null
  :wizard/logo                            - ipfs, not null
  :wizard/completions-count               - unsigned integer, default 0
  :wizard/created-on                      - unsigned integer, not null


  primary key(:wizard/code)
  foreign key(:wizard/logo, Files(:file/hash))
}


class UIComponents << (T, #c0b7b1) Table >> {
  :ui-component/uuid                     - uuid
  :district/address                      - address, not null
  :ui-component/name                     - varchar, not null
  :ui-component/settings                 - varchar
  :ui-component/type                     - varchar, indexed not null
  :ui-component/files                    - uuid

  primary key(:ui-component/uuid)
  foreign key(:district/address, Districts(:district/address))
  foreign key(:ui-component/files, MultiFiles(:multi-file/uuid))
}
UIComponents -- Districts : fk(:district/address)
UIComponents -- MultiFiles : fk(:ui-component/files)


class UIComponentChildren << (T, #c0b7b1) Table >> {
  :ui-component/uuid                     - uuid
  :ui-component/child                    - uuid

  primary key(:ui-component/uuid, :ui-component/child)
  foreign key(:ui-component/uuid, UIComponent(:ui-component/uuid))
}
UIComponentChildren -- UIComponents : fk(:ui-component/uuid)


class TagGroups << (T, #c0b7b1) Table >> {
  :tag-group/uuid                        - uuid
  :tag-group/name                        - varchar, indexed not null
  :tag-group/district-origin             - address, not null
  :tag-group/global-enabled?             - boolean, indexed
  :tag-group/users-allowed-adding-tags?  - boolean

  primary key(:tag-group/uuid)
  foreign key(:tag-group/district-origin, Districts(:district/address))
}
TagGroups -- Districts : fk(:tag-group/district-origin)


class Tags << (T, #c0b7b1) Table >> {
  :tag-group/uuid                        - uuid, not null
  :tag/name                              - varchar, not null

  primary key(:tag-group/uuid, :tag/name)
  foreign key(:tag-group/uuid, TagGroups(:tag-group/uuid))
}
Tags -- TagGroups : fk(:tag-group/uuid)


class MultiTags << (T, #c0b7b1) Table >> {
  :multi-tag/uuid                        - uuid
  :tag-group/uuid                        - uuid
  :tag/name                              - varchar, not null

  primary key(:multi-tag/uuid, :tag-group/uuid, :tag/name)
  foreign key(:tag-group/uuid, Tags(:tag-group/uuid))
  foreign key(:tag/name, Tags(:tag/name))
}
MultiTags -- Tags : fk(:tag-group/uuid, :tag/name)


' -------------
' Tokens Module
' -------------


class TokenContracts << (T, #EF476F) Table >> {
  :token-contract/address                           - address
  :token-contract/fields                            - uuid
  :token-contract/symbol                            - varchar
  :token-contract/type                              - varchar, indexed not null
  :token-contract/district-origin                   - address, not null
  :token-contract/metadata-format                   - varchar
  :token-contract/metadata-format-settings          - varchar
  :token-contract/misconfig-report-creator          - address
  :token-contract/misconfig-report-comment          - varchar
  :token-contract/misconfig-report-created-on       - unsigned integer
  :token-contract/misconfig-report-resolved-by      - address
  :token-contract/misconfig-report-resolved-on      - unsigned integer
  
  primary key(:token-contract/address)
  foreign key(:token-contract/address, SmartContracts(:token-contract/address))
  foreign key(:token-contract/fields, MultiFields(:multi-field/uuid))
  foreign key(:token-contract/district-origin, Districts(:district/address))
}
TokenContracts -- SmartContracts : fk(:token-contract/address)
TokenContracts -- Districts : fk(:token-contract/district-origin)
TokenContracts -- MultiFields : fk(:token-contract/fields)


class MultiTokenContracts << (T, #EF476F) Table >> {
  :multi-token-contract/uuid                        - uuid
  :token-contract/address                           - address

  primary key(:multi-token-contract/uuid, :token-contract/address)
  foreign key(:token-contract/address, TokenContracts(:token-contract/address))
}
MultiTokenContracts -- TokenContracts : fk(:token-contract/address)


class DistrictTokenContracts << (T, #EF476F) Table >> {
  :token-contract/address            - address
  :district/address                  - address

  primary key(:token-contract/address, :district/address)
  foreign key(:token-contract/address, TokenContracts(:token-contract/address))
  foreign key(:district/address, Districts(:district/address))
}
DistrictTokenContracts -- TokenContracts : fk(:token-contract/address)
DistrictTokenContracts -- Districts : fk(:district/address)


class Tokens << (T, #EF476F) Table >> {
  :token-contract/address                 - address
  :token/id                               - unsigned integer, not null
  :token/decimals                         - unsigned integer, not null
  :token/total-supply                     - unsigned big integer, not null
  :token/field-values                     - uuid

  primary key(:token-contract/address, :token/id)
  foreign key(:token-contract/address, TokenContracts(:token-contract/address))
  foreign key(:token/field-values, MultiFieldValues(:multi-field-value/uuid))
}
Tokens -- TokenContracts : fk(:token-contract/address)
Tokens -- MultiFieldValues : fk(:token/field-values)


class MultiTokens << (T, #EF476F) Table >> {
  :multi-token/uuid                       - uuid
  :token-contract/address                 - address
  :token/id                               - unsigned integer

  primary key(:multi-token/uuid, :token-contract/address, :token/id)
  foreign key(:token-contract/address, Tokens(:token-contract/address))
  foreign key(:token/id, Tokens(:token/id))
}
MultiTokens -- Tokens : fk(:token-contract/address, :token/id)


class TokenValues << (T, #EF476F) Table >> {
  :token-value/uuid                       - uuid
  :token-contract/address                 - address
  :token/id                               - unsigned integer
  :token-value/value                      - unsigned big integer, not null

  primary key(:token-value/uuid)
  foreign key(:token-contract/address, Tokens(:token-contract/address))
  foreign key(:token/id, Tokens(:token/id))
}
TokenValues -- Tokens : fk(:token-contract/address, :token/id)


class MultiTokenValues << (T, #EF476F) Table >> {
  :multi-token-value/uuid                 - uuid
  :token-value/uuid                       - uuid

  primary key(:multi-token-value/uuid, :token-value/uuid)
  foreign key(:token-value/uuid, TokenValues(:token-value/uuid))
}
MultiTokenValues -- TokenValues : fk(:token-value/uuid)


' -------------
' Users Module
' -------------


class UserProfiles << (T, #FFD166) Table >> {
  :user-profile/uuid                        - uuid
  :user-profile/fields                      - uuid, not null
  :user-profile/name                        - varchar, not null
  :user-profile/district-origin             - address, not null
  :user-profile/global-enabled?             - boolean, indexed
  :user-profile/global-description          - varchar
  :user-profile/global-logo                 - ipfs

  primary key(:user-profile/uuid)
  foreign key(:user-profile/fields, MultiFields(:multi-field/uuid))
  foreign key(:user-profile/global-logo, Files(:file/hash))
}
UserProfiles -- MultiFields : fk(:user-profile/fields)


class DistrictUserProfiles << (T, #FFD166) Table >> {
  :district/address                       - address
  :user-profile/uuid                      - uuid

  primary key(:district/address, :user-profile/uuid)
  foreign key(:district/address, Districts(:district/address))
  foreign key(:user-profile/uuid, UserProfiles(:user-profile/uuid))
}
DistrictUserProfiles -- Districts : fk(:district/address)
DistrictUserProfiles -- UserProfiles : fk(:user-profile/uuid)


class Users << (T, #FFD166) Table >> {
  :user/address                        - address
  :user/field-values                   - uuid
  :user/global-rating                  - unsigned float, indexed default 0
  :user/global-ratings-count           - unsigned integer, indexed default 0

  primary key(:user/address)
  foreign key(:user/field-values, MultiFieldValues(:multi-field-value/uuid))

}
Users -- MultiFieldValues : fk(:user/field-values)


class Messages << (T, #FFD166) Table >> {
  :message/uuid                        - uuid
  :message/sender                      - address, not null
  :message/receiver                    - address, not null
  :message/type                        - varchar, indexed not null
  :message/text                        - varchar, not null
  :message/files                       - uuid
  :message/created-on                  - unsigned integer, indexed

  primary key(:message/uuid)
  foreign key(:message/files, MultiFiles(:multi-file/uuid))
}
Messages -- MultiFiles : fk(:message/files)


class MultiMessages << (T, #FFD166) Table >> {
  :multi-message/uuid                  - uuid
  :message/uuid                        - uuid

  primary key(:multi-message/uuid, :message/uuid)
  foreign key(:message/uuid, Messages(:message/uuid))
}
MultiMessages -- Messages : fk(:message/uuid)


' ------------------------
' Marketplace Module
' ------------------------


enum OfferType {
  DELIVERABLE_AUCTION
  DYNAMIC_PRICE
  FIXED_PRICES
  HIGEST_BID_AUCTION
  MULTI_TOKEN_AUCTION
}


class OfferGroups << (T, #00B4D8) Table >> {
  :offer-group/address                            - address
  :offer-group/offer-fields                       - uuid, not null
  :offer-group/offer-response-fields              - uuid
  :offer-group/offerable-token-contracts          - uuid, not null
  :offer-group/requestable-token-contracts        - uuid, not null
  :offer-group/create-offer-user-roles            - uuid
  :offer-group/create-offer-response-user-roles   - uuid
  :offer-group/resolve-dispute-user-roles         - uuid
  :offer-group/name                               - varchar, not null
  :offer-group/district-origin                    - address, not null
  :offer-group/global-enabled?                    - boolean, indexed
  :offer-group/global-description                 - varchar
  :offer-group/global-logo                        - ipfs
  :offer-group/created-on                         - unsigned integer, not null

  primary key(:offer-group/address)
  foreign key(:offer-group/address, SmartContracts(:smart-contract/address))
  foreign key(:offer-group/offer-fields, MultiFields(:multi-field/uuid))
  foreign key(:offer-group/offer-response-fields, MultiFields(:multi-field/uuid))
  foreign key(:offer-group/offerable-token-contracts, MultiTokenContracts(:multi-token-contract/uuid))
  foreign key(:offer-group/requestable-token-contracts, MultiTokenContracts(:multi-token-contract/uuid))
  foreign key(:offer-group/create-offer-user-roles, MultiUserRoles(:multi-user-role/uuid))
  foreign key(:offer-group/create-offer-response-user-roles, MultiUserRoles(:multi-user-role/uuid))
  foreign key(:offer-group/resolve-dispute-user-roles, MultiUserRoles(:multi-user-role/uuid))
  foreign key(:offer-group/district-origin, Districts(:district/address))
}
OfferGroups -- SmartContracts : fk(:offer-group/address)
OfferGroups -- Districts : fk(:offer-group/district-origin)
OfferGroups -- MultiFields : fk(:offer-group/offer-fields, :offer-group/offer-response-fields)
OfferGroups -- MultiTokenContracts : fk(:offer-group/offerable-token-contracts, :offer-group/requestable-token-contracts)
OfferGroups -- MultiUserRoles : fk(:offer-group/create-offer-user-roles, :offer-group/create-offer-response-user-roles, :offer-group/resolve-dispute-user-roles)


class OfferGroupAllowedOfferTypes << (T, #00B4D8) Table >> {
  :offer-group/address                    - address
  :offer-group/allowed-offer-type         - OfferType, not null

  primary key(:offer-group/address, :offer-group/allowed-offer-type)
  foreign key(:offer-group/address, OfferGroups(:offer-group/address))
}
OfferGroupAllowedOfferTypes -- OfferGroups : fk(:offer-group/address)


class OfferGroupUsers << (T, #00B4D8) Table >> {
  :offer-group/address                       - address
  :user/address                              - address
  :offer-group-user/rating                   - unsigned float, indexed default 0
  :offer-group-user/ratings-count            - unsigned integer, indexed default 0

  primary key(:offer-group/address, :user/address)
  foreign key(:offer-group/address, OfferGroups(:offer-group/address))
  foreign key(:user/address, Fields(:user/address))
}
OfferGroupUsers -- OfferGroups : fk(:offer-group/address)
OfferGroupUsers -- Users : fk(:user/address)


class Offers << (T, #00B4D8) Table >> {
  :offer/address                               - address
  :offer-group/address                         - address not null
  :offer/field-values                          - uuid
  :offer/type                                  - OfferType, not null
  :offer/creator                               - address, indexed not null
  :offer/offered-values                        - uuid not null
  :offer/available-values                      - uuid
  :offer/created-on                            - unsigned integer, indexed not null

  primary key(:offer/address)
  foreign key(:offer/address, SmartContracts(:offer/address))
  foreign key(:offer-group/address, OfferGroups(:offer-group/address))
  foreign key(:offer/field-values, MultiFieldValues(:multi-field-value/uuid))
  foreign key(:offer/offered-values, MultiTokenValues(:multi-token-value/uuid))
  foreign key(:offer/available-values, MultiTokenValues(:multi-token-value/uuid))
}
Offers -- SmartContracts : fk(:offer/address)
Offers -- OfferGroups : fk(:offer-group/address)
Offers -- MultiTokenValues : fk(:offer/offered-values, :offer/available-values)
Offers -- MultiFieldValues : fk(:offer/field-values)


class FixedPricesOfferRequests << (T, #00B4D8) Table >> {
  :offer/address                               - address
  :offer-request/fixed-prices                  - uuid

  primary key(:offer/address, :offer-request/fixed-prices)
  foreign key(:offer/address, Offers(:offer/address))
  foreign key(:offer-request/fixed-prices, MultiTokenValues(:multi-token-value/uuid))
}
FixedPricesOfferRequests -- Offers : fk(:offer/address)
FixedPricesOfferRequests -- MultiTokenValues : fk(:offer-request/fixed-prices)


class DynamicPriceOfferRequests << (T, #00B4D8) Table >> {
  :offer/address                               - address
  :token-contract/address                      - address, not null
  :token/id                                    - unsigned integer, not null
  :offer-request/start-price                   - unsigned big integer, not null
  :offer-request/end-price                     - unsigned big integer, not null
  :offer-request/duration                      - unsigned integer, not null
  :offer-request/end-price-on                  - unsigned integer, indexed not null

  primary key(:offer/address)
  foreign key(:offer/address, Offers(:offer/address))
  foreign key(:token-contract/address, Tokens(:token-contract/address))
  foreign key(:token/id, Tokens(:token/id))
}
DynamicPriceOfferRequests -- Offers : fk(:offer/address)
DynamicPriceOfferRequests -- Tokens : fk(:token-contract/address, :token/id)


class HighestBidAuctionOfferRequests << (T, #00B4D8) Table >> {
  :offer/address                               - address
  :token-contract/address                      - address, not null
  :token/id                                    - unsigned integer, not null
  :offer-request/min-price                     - unsigned big integer, not null
  :offer-request/min-bid-step                  - unsigned big integer, not null
  :offer-request/duration                      - unsigned integer, not null
  :offer-request/extension-duration            - unsigned integer, not null
  :offer-request/extension-trigger-duration    - unsigned integer, not null
  :offer-request/ends-on                       - unsigned integer, indexed not null

  primary key(:offer/address)
  foreign key(:offer/address, Offers(:offer/address))
  foreign key(:token-contract/address, Tokens(:token-contract/address))
  foreign key(:token/id, Tokens(:token/id))
}
HighestBidAuctionOfferRequests -- Offers : fk(:offer/address)
HighestBidAuctionOfferRequests -- Tokens : fk(:token-contract/address, :token/id)


class MultiTokenAuctionOfferRequests << (T, #00B4D8) Table >> {
  :offer/address                               - address
  :offer-request/accepted-token-contracts      - uuid, not null
  :offer-request/duration                      - unsigned integer, not null
  :offer-request/extension-duration            - unsigned integer, not null
  :offer-request/extension-trigger-duration    - unsigned integer, not null
  :offer-request/ends-on                       - unsigned integer, indexed not null

  primary key(:offer/address)
  foreign key(:offer/address, Offers(:offer/address))
  foreign key(:offer-request/accepted-token-contracts, MultiTokenContracts(:multi-token/uuid))
}
MultiTokenAuctionOfferRequests -- Offers : fk(:offer/address)
MultiTokenAuctionOfferRequests -- MultiTokenContracts : fk(:multi-token-contract/uuid)


class OfferResponses << (T, #00B4D8) Table >> {
  :offer/address                              - address
  :offer-response/index                       - unsigned integer
  :offer-response/field-values                - uuid
  :offer-response/respondent                  - address, indexed not null
  :offer-response/response-values             - uuid
  :offer-response/offerer-received-values     - uuid
  :offer-response/respondent-received-values  - uuid
  :offer-response/messages                    - uuid
  :offer-response/offerer-feedback            - uuid
  :offer-response/respondent-feedback         - uuid
  :offer-response/canceled-on                 - unsigned integer
  :offer-response/completed-on                - unsigned integer
  :offer-response/created-on                  - unsigned integer, indexed not null
  :offer-response/updated-on                  - unsigned integer
  :offer-response/dispute-raised-on           - unsigned integer
  :offer-response/dispute-resolved-on         - unsigned integer
  :offer-response/dispute-resolved-by         - address

  primary key(:offer/address, :offer-response/index)
  foreign key(:offer/address, Offers(:offer/address))
  foreign key(:offer-response/field-values, MultiFieldValues(:multi-field-value/uuid))
  foreign key(:offer-response/offerer-feedback, Feedbacks(:feedback/uuid))
  foreign key(:offer-response/respondent-feedback, Feedbacks(:feedback/uuid))
  foreign key(:offer-response/response-values, MultiTokenValues(:multi-token-value/uuid))
  foreign key(:offer-response/offerer-received-values, MultiTokenValues(:multi-token-value/uuid))
  foreign key(:offer-response/respondent-received-values, MultiTokenValues(:multi-token-value/uuid))
  foreign key(:offer-response/messages, MultiMessages(:multi-message/uuid))
}
OfferResponses -- Offers : fk(:offer/address)
OfferResponses -- MultiFieldValues : fk(:offer-response/field-values)
OfferResponses -- Feedbacks : fk(:offer-response/offerer-feedback, :offer-response/respondent-feedback)
OfferResponses -- MultiTokenValues : fk(:offer-response/response-values, :offer-response/offerer-received-values, :offer-response/respondent-received-values)
OfferResponses -- MultiMessages : fk(:multi-message/uuid)


class OfferSponsorships << (T, #00B4D8) Table >> {
  :offer/address                              - address
  :offer-sponsorship/sponsor                  - address, indexed not null
  :offer-sponsorship/sponsored-values         - uuid, not null
  :offer-sponsorship/updated-on               - unsigned integer, indexed
  :offer-sponsorship/created-on               - unsigned integer, indexed not null

  primary key(:offer/address, :offer-sponsorship/sponsor)
  foreign key(:offer/address, Offers(:offer/address))
  foreign key(:offer-sponsorship/sponsored-values, MultiTokenValues(:multi-token-value/uuid))
}
OfferSponsorships -- Offers : fk(:offer/address)
OfferSponsorships -- MultiTokenValues : fk(:multi-token-value/uuid)


class OfferAllowedRespondents << (T, #00B4D8) Table >> {
  :offer/address                              - address
  :offer/allowed-respondent                   - address

  primary key(:offer/address, :offer/allowed-respondent)
  foreign key(:offer/address, Offers(:offer/address))
}
OfferAllowedRespondents -- Offers : fk(:offer/address)


class Feedbacks << (T, #00B4D8) Table >> {
  :feedback/uuid                              - uuid
  :feedback/rating                            - unsigned float, indexed default 0
  :feedback/receiver                          - address, indexed not null
  :feedback/sender                            - address, indexed not null
  :feedback/text                              - varchar
  :feedback/updated-on                        - unsigned integer, indexed
  :feedback/created-on                        - unsigned integer, indexed not null

  primary key(:feedback/uuid)
}


' -------------
' TCR Module
' -------------


enum TCRType {
  CHALLENGEABLE_ONCE
  CHALLENGEABLE_ANYTIME
}


enum TCRRegEntryRepresentationCategory {
  ERC721
  ERC1155
  NO_TOKEN
}

enum TCREntriesGroup {
  REGISTRY_ENTRIES
  PARAM_CHANGE_ENTRIES
}

enum TCRParameterKey {
  CHALLENGE_DISPENSATION
  CHALLENGE_PERIOD_DURATION
  DEPOSIT
  VOTE_COMMIT_PERIOD_DURATION
  VOTE_QUORUM
  VOTE_REVEAL_PERIOD_DURATION
}

enum TCRVoteOption {
  INCLUDE
  EXCLUDE
  NO_VOTE
}


class TCRs << (T, #06D6A0) Table >> {
  :tcr/address                                    - address
  :tcr/reg-entry-fields                           - uuid, not null
  :tcr/reg-entry-representation-category          - TCRRegEntryRepresentationCategory, not null
  :tcr/reg-entry-representation-token-contract    - address
  :tcr/type                                       - TCRType, not null
  :tcr/voting-token-address                       - address, not null
  :tcr/voting-token-id                            - unsigned integer, not null
  :tcr/create-reg-entry-user-roles                - uuid
  :tcr/create-param-change-entry-user-roles       - uuid
  :tcr/district-origin                            - address, not null
  :tcr/global-enabled?                            - boolean, indexed
  :tcr/global-description                         - varchar
  :tcr/global-logo                                - ipfs
  :tcr/created-on                                 - unsigned integer, indexed not null

  primary key(:tcr/address)
  foreign key(:tcr/address, SmartContracts(:smart-contract/address))
  foreign key(:tcr/reg-entry-fields, MultiFields(:multi-field/uuid))
  foreign key(:tcr/reg-entry-representation-token-contract, TokenContracts(:token-contract/address))
  foreign key(:tcr/voting-token-address, Tokens(:token-contract/address))
  foreign key(:tcr/voting-token-id, Tokens(:token/id))
  foreign key(:tcr/create-reg-entry-user-roles, MultiUserRoles(:multi-user-role/uuid))
  foreign key(:tcr/create-param-change-entry-user-roles, MultiUserRoles(:multi-user-role/uuid))
  foreign key(:tcr/district-origin, Districts(:district/address))
  foreign key(:tcr/global-logo, Files(:file/hash))
}
TCRs -- SmartContracts : fk(:tcr/address)
TCRs -- MultiFields : fk(:tcr/reg-entry-fields)
TCRs -- TokenContracts : fk(:tcr/reg-entry-representation-token-contract)
TCRs -- Tokens : fk(:tcr/voting-token-address, :tcr/voting-token-id)
TCRs -- MultiUserRoles : fk(:tcr/create-reg-entry-user-roles, :tcr/create-param-change-entry-user-roles)
TCRs -- Districts : fk(:tcr/district-origin)


class TCREntries << (T, #06D6A0) Table >> {
  :tcr-entry/address                       - address
  :tcr/address                             - address, not null
  :tcr-entry/creator                       - address, indexed not null
  :tcr-entry/challenge-period-end          - unsigned integer, indexed
  :tcr-entry/created-on                    - unsigned integer, indexed not null

  primary key(:tcr-entry/address)
  foreign key(:tcr-entry/address, SmartContracts(:smart-contract/address))
  foreign key(:tcr/address, TCRs(:tcr/address))
}
TCREntries -- SmartContracts : fk(:tcr-entry/address)
TCREntries -- TCRs : fk(:tcr/address)


class TCRRegEntries << (T, #06D6A0) Table >> {
  :tcr-entry/address                              - address
  :tcr-reg-entry/field-values                     - uuid, not null
  :tcr-reg-entry/minted-token-value               - uuid
  :tcr-reg-entry/minted-on                        - unsigned integer

  primary key(:tcr-entry/address)
  foreign key(:tcr-entry/address, TCREntries(:tcr-entry/address))
  foreign key(:tcr-reg-entry/field-values, MultiFieldValues(:multi-field-value/uuid))
  foreign key(:tcr-reg-entry/minted-token-value, TokenValues(:token-value/uuid))
}
TCRRegEntries -- TCREntries : fk(:tcr-entry/address)
TCRRegEntries -- MultiFieldValues : fk(:tcr-reg-entry/field-values)
TCRRegEntries -- TokenValues : fk(:tcr-reg-entry/minted-token-value)


class TCRParamChangeEntries << (T, #06D6A0) Table >> {
  :tcr-entry/address                                          - address
  :tcr-param-change-entry/parameter-key                       - TCRParameterKey, not null
  :tcr-param-change-entry/parameter-value                     - unsigned integer, not null
  :tcr-param-change-entry/parameter-original-value            - unsigned integer, not null
  :tcr-param-change-entry/entries-group                       - TCREntriesGroup, not null
  :tcr-param-change-entry/comment                             - varchar
  :tcr-param-change-entry/applied-on                          - unsigned integer, indexed

  primary key(:tcr-entry/address)
  foreign key(:tcr-entry/address, TCREntries(:tcr-entry/address))
}
TCRParamChangeEntries -- TCREntries : fk(:tcr-entry/address)


class TCRChallenges << (T, #06D6A0) Table >> {
  :tcr-entry/address                                          - address
  :tcr-challenge/index                                        - unsigned integer
  :tcr-challenge/challenger                                   - address, indexed, not null
  :tcr-challenge/vote-commit-period-end                       - unsigned integer, indexed not null
  :tcr-challenge/vote-reveal-period-end                       - unsigned integer, indexed not null
  :tcr-challenge/challenger-reward                            - uuid
  :tcr-challenge/challenger-reward-claimed-on                 - unsigned integer
  :tcr-challenge/creator-reward                               - uuid
  :tcr-challenge/creator-reward-claimed-on                    - unsigned integer
  :tcr-challenge/comment                                      - varchar
  :tcr-challenge/reward-pool                                  - uuid, not null
  :tcr-challenge/votes-exclude                                - unsigned integer, default 0
  :tcr-challenge/votes-include                                - unsigned integer, default 0
  :tcr-challenge/votes-total                                  - unsigned integer, default 0
  :tcr-challenge/created-on                                   - unsigned integer, indexed not null

  primary key(:tcr-entry/address, :tcr-challenge/index)
  foreign key(:tcr-entry/address, TCREntries(:tcr-entry/address))
  foreign key(:tcr-challenge/challenger-reward, TokenValues(:token-value/uuid))
  foreign key(:tcr-challenge/creator-reward, TokenValues(:token-value/uuid))
  foreign key(:tcr-challenge/reward-pool, TokenValues(:token-value/uuid))
}
TCRChallenges -- TCREntries : fk(:tcr-entry/address)
TCRChallenges -- TokenValues : fk(:tcr-challenge/challenger-reward, :tcr-challenge/creator-reward, :tcr-challenge/reward-pool)


class TCRVotes << (T, #06D6A0) Table >> {
  :tcr-entry/address                                      - address
  :tcr-challenge/index                                    - unsigned integer
  :tcr-vote/voter                                         - address, indexed not null
  :tcr-vote/option                                        - TCRVoteOption, indexed not null
  :tcr-vote/amount                                        - unsigned big integer, not null
  :tcr-vote/voter-reward-claimed-on                       - unsigned integer
  :tcr-vote/voter-reward                                  - uuid
  :tcr-vote/votes-reclaimed-on                            - unsigned integer
  :tcr-vote/revealed-on                                   - unsigned integer, indexed
  :tcr-vote/created-on                                    - unsigned integer, indexed not null

  primary key(:tcr-entry/address, :tcr-challenge/index)
  foreign key(:tcr-entry/address, TCRChallenges(:tcr-entry/address))
  foreign key(:tcr-challenge/index, TCRChallenges(:tcr-challenge/index))
  foreign key(:tcr-vote/voter-reward, TokenValues(:token-value/uuid))
}
TCRVotes -- TCRChallenges : fk(:tcr-entry/address, :tcr-challenge/index)
TCRVotes -- TokenValues : fk(:tcr-vote/voter-reward)


class TCRParameters << (T, #06D6A0) Table >> {
  :tcr/address                                            - address
  :tcr-parameter/entries-group                            - TCREntriesGroup
  :tcr-parameter/challenge-dispensation                   - unsigned integer, not null
  :tcr-parameter/challenge-period-duration                - unsigned integer, not null
  :tcr-parameter/deposit                                  - unsigned big integer, not null
  :tcr-parameter/vote-commit-period-duration              - unsigned integer, not null
  :tcr-parameter/vote-quorum                              - unsigned integer, not null
  :tcr-parameter/vote-reveal-period-duration              - unsigned integer, not null

  primary key(:tcr/address, :tcr-parameter/entries-group)
  foreign key(:tcr/address, TCRs(:tcr/address))
}
TCRParameters -- TCRs : fk(:tcr/address)

@enduml